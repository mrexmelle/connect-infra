CREATE DATABASE org;
CREATE USER org_r WITH PASSWORD '123';
CREATE USER org_w WITH PASSWORD '123';
GRANT CONNECT ON DATABASE org TO org_r;
GRANT CONNECT ON DATABASE org TO org_w;

\c org;

CREATE EXTENSION pgcrypto;

CREATE TABLE IF NOT EXISTS nodes(
	id TEXT NOT NULL,
	hierarchy TEXT NOT NULL,
	email_address TEXT NOT NULL DEFAULT '',
	name TEXT NOT NULL,
	created_at TIMESTAMPTZ NOT NULL,
	updated_at TIMESTAMPTZ NOT NULL,
	deleted_at TIMESTAMPTZ DEFAULT NULL,
	CONSTRAINT pk_nodes PRIMARY KEY(id)
);
GRANT SELECT ON nodes TO org_r;
GRANT SELECT, UPDATE, INSERT, DELETE ON nodes TO org_w;

CREATE TABLE IF NOT EXISTS roles(
    id TEXT NOT NULL,
    name TEXT NOT NULL,
    rank INTEGER DEFAULT 2147483647,
	max_count INTEGER DEFAULT -1,
	created_at TIMESTAMPTZ NOT NULL,
	updated_at TIMESTAMPTZ NOT NULL,
	deleted_at TIMESTAMPTZ DEFAULT NULL,
	CONSTRAINT pk_roles PRIMARY KEY(id),
	CONSTRAINT un_roles UNIQUE(name)
);
GRANT SELECT ON roles TO org_r;
GRANT SELECT, UPDATE, INSERT, DELETE ON roles TO org_w;

CREATE TABLE IF NOT EXISTS designations(
    id INTEGER GENERATED ALWAYS AS IDENTITY,
    node_id TEXT NOT NULL,
	role_id TEXT NOT NULL,
	ehid TEXT NOT NULL,
	created_at TIMESTAMPTZ NOT NULL,
	updated_at TIMESTAMPTZ NOT NULL,
	deleted_at TIMESTAMPTZ DEFAULT NULL,
	CONSTRAINT pk_designations PRIMARY KEY(id),
	CONSTRAINT fk_designations_1 FOREIGN KEY(node_id) REFERENCES nodes(id),
	CONSTRAINT fk_designations_2 FOREIGN KEY(role_id) REFERENCES roles(id)
);
GRANT SELECT ON designations TO org_r;
GRANT SELECT, UPDATE, INSERT, DELETE ON designations TO org_w;

CREATE TABLE IF NOT EXISTS memberships(
	id INTEGER GENERATED ALWAYS AS IDENTITY,
	ehid TEXT NOT NULL,
	start_date DATE NOT NULL,
	end_date DATE DEFAULT NULL,
	node_id TEXT NOT NULL,
	created_at TIMESTAMPTZ NOT NULL,
	updated_at TIMESTAMPTZ NOT NULL,
	CONSTRAINT pk_memberships PRIMARY KEY(id)
);
GRANT SELECT ON memberships TO org_r;
GRANT SELECT, UPDATE, INSERT, DELETE ON memberships TO org_w;
